@page "/"
@using Grafik.Components.Dialogs
@using Grafik.Components.Shared
@using Grafik.Data
@rendermode InteractiveServer

@inject DialogService DialogService

@code{
    DateTime PlannerSessionStartDate = new DateTime(2024, 09, 01);
    DateTime PlannerSessionEndDate = new DateTime(2025, 01, 01);

    EventConsole console;
    RadzenScheduler<Appointment> scheduler;

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { 
            Start = new DateTime(2024, 12, 16, 7, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 16, 19, 00, 00, DateTimeKind.Local),
            Text = "Zmiana dzienna" 
        },
        new Appointment { 
            Start = new DateTime(2024, 12, 16, 19, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 17, 0, 00, 00, DateTimeKind.Local),
            Text = "Zmiana nocna P1" 
        },
        new Appointment {
            Start = new DateTime(2024, 12, 17, 0, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 17, 7, 00, 00, DateTimeKind.Local),
            Text = "Zmiana nocna P2"
        },
        new Appointment {
            Start = new DateTime(2024, 12, 17, 7, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 17, 19, 00, 00, DateTimeKind.Local),
            Text = "Zmiana dzienna 2"
        },
        new Appointment {
            Start = new DateTime(2024, 12, 17, 19, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 18, 0, 00, 00, DateTimeKind.Local),
            Text = "Zmiana nocna 2 P1"
        },
        new Appointment {
            Start = new DateTime(2024, 12, 18, 0, 00, 00, DateTimeKind.Local),
            End = new DateTime(2024, 12, 18, 7, 00, 00, DateTimeKind.Local),
            Text = "Zmiana nocna 2 P2"
        },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        var d = args.End - args.Start;

        if (args.Start < PlannerSessionStartDate || args.End > PlannerSessionEndDate)
        {
            args.Attributes["Style"] = "background: #f5f5f5; .input-wrap! > input[type=text] { background: #000; }";
        }

        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (7-19)
        if (args.View.Text == "Week" || args.View.Text == "Day")
        {
            if (args.Start.Hour > 7 && args.Start.Hour < 19)
            {
                args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(35, 116, 247,.2));";
            }
            else if (args.Start.Hour <= 7 || args.Start.Hour >= 19)
            {
                var style = "background: var(--rz-scheduler-highlight-background-color, rgba(84, 181, 54,.2));";
                args.Attributes["style"] = style;

                // args.Attributes["class"] += " color-red" ?? "color-red";
            }
        }
    }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        // var copy = new Appointment
        //     {
        //         Start = args.Data.Start,
        //         End = args.Data.End,
        //         Text = args.Data.Text
        //     };

        // var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        // if (data != null)
        // {
        //     args.Data.Start = data.Start;
        //     args.Data.End = data.End;
        //     args.Data.Text = data.Text;
        // }

        // await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red; margin-left: 50%;";
        }

        double widthPercentPerHour = 100 / 24;
        var hours = (args.End - args.Start).Hours + 1;
        var width = hours * widthPercentPerHour;
        var marginLeft = args.Start.Hour * widthPercentPerHour;
        var marginRight = (24 - args.End.Hour) * widthPercentPerHour;

        args.Attributes["style"] = $"width: {width}%; margin-left: {marginLeft}%; margin-right: {marginRight}%";
        args.Attributes["title"] = "";

        if (args.Start.Hour >= 7 && args.Start.Hour < 19)
        {
            args.Attributes["class"] = "rz-event-content color-green";
        }
        else if (args.Start.Hour <= 7 || args.Start.Hour >= 19)
        {
            args.Attributes["class"] = "rz-event-content color-red";
        }

        // TODO: color per person in Appointment
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;
            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            await scheduler.Reload();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
}

<PageTitle>Grafik</PageTitle>

<RadzenScheduler 
    @ref=@scheduler 
    SlotRender=@OnSlotRender 
    style="height: 768px;" 
    TItem="Appointment" 
    Data=@appointments 
    StartProperty="Start" 
    EndProperty="End"
    TextProperty="Text" 
    SelectedIndex="3"
    SlotSelect=@OnSlotSelect
    AppointmentSelect=@OnAppointmentSelect 
    AppointmentRender=@OnAppointmentRender
    AppointmentMove=@OnAppointmentMove
    
>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearPlannerView
        MaxAppointmentsInSlot="5"
        />
</RadzenScheduler>

<EventConsole @ref=@console />


<style scoped>
    .rz-event {
        display: flex;
    }

    .rz-event {
        padding-inline: 0;
    }

    .color-red {
        background-color: red;
    }

    .color-green {
        background-color: lawngreen;
    }

    .rz-event-content {
        border-radius: 0;
    }
</style>
